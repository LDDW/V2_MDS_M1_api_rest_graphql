type Customer {
    id: ID
    firstname: String
    lastname: String
    email: String
    password: String
}

type Restaurant {
    id: ID
    name: String
    address: String
    phone: String
    email: String
    password: String
    card: Card
}

type DeliveryMan {
    id: Int
    firstname: String
    lastname: String
    email: String
    password: String
    delivery: [Delivery]
}

type Delivery {
    date: String
    restaurantId: ID
    customerId: ID
    deliveryManId: ID
}

type Menu {
    name: String
    description: String
    price: Float
    CardId: ID
    menuDish: [MenuDish]
}

type MenuDish {
    menuId: ID
    dishId: ID
    dish: Dish
}

type Dish {
    name: String
    price: Float
}

type Card {
    menu: [Menu]
    dish: [Dish]
}

# query and mutation
type Query {
    customer(id: ID!): Customer
    restaurant: [Restaurant]
    deliveryMan(id: ID!): DeliveryMan
    menus(restaurantId: ID!): [Menu]
    menu(menuId: ID!): Menu
    dish(restaurantId: ID!): [Dish]
}

type Mutation {
    # customer
    customerLogin(email: String, password: String): String!
}