type Customer {
    id: ID
    firstname: String
    lastname: String
    email: String
    password: String
}

type Restaurant {
    id: ID
    name: String!
    address: String!
    phone: String!
    email: String!
    password: String!
}

type DeliveryMan {
    id: Int!
    firstname: String!
    lastname: String!
    email: String!
    password: String!
}

type Delivery {
    date: String!
    restaurantId: ID!
    customerId: ID!
    deliveryManId: ID!
}

type Card {
    RestaurantId: ID!
}

type Menu {
    name: String!
    description: String!
    price: Float!
    CardId: ID! 
}

type Dish {
    name: String!
    description: String!
    price: Float!
}

type Order {
    menuId: ID!
    dishId: ID!
    deliveryId: ID!
}

type MenuDish {
    menuId: ID!
    dishId: ID!
}

type Query {
    customer: Customer
}

type AuthPayload {
    message: String
    customer: Customer
    token: String
}

type Mutation {
    # customer
    customerLogin(email: String, password: String): String!
    customerRegister(firstname: String!, lastname: String!, email: String!, password: String!): Customer!
    customerUpdate(id: Int!, firstname: String!, lastname: String!, email: String!): Customer
    customerDelete(id: Int!): Customer

    # deliveryMan

    # restaurant

    # deliveries

    # dishes

    # Menu
}